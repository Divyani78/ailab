import networkx as nx
import matplotlib.pyplot as plt
from collections import deque
from typing import Dict, List, Set, Tuple

class RouteFinder:
    def __init__(self):
        self.graph = nx.Graph()
        
    def add_road(self, intersection1: str, intersection2: str, weight: int = 1):
        """Add a road between two intersections with optional weight."""
        self.graph.add_edge(intersection1, intersection2, weight=weight)
        
    def bidirectional_bfs(self, start: str, end: str) -> List[str]:
        """
        Implements Bi-directional BFS to find shortest path between start and end nodes.
        Returns the path as a list of nodes.
        """
        # Initialize forward and backward queues
        forward_queue = deque([(start, [start])])
        backward_queue = deque([(end, [end])])
        
        # Initialize visited sets for both directions
        forward_visited = {start}
        backward_visited = {end}
        
        while forward_queue and backward_queue:
            # Forward BFS
            current, path = forward_queue.popleft()
            for neighbor in self.graph.neighbors(current):
                if neighbor in backward_visited:
                    # Found intersection point
                    backward_path = self._find_backward_path(neighbor, end, backward_visited)
                    return path + backward_path[1:]
                
                if neighbor not in forward_visited:
                    forward_visited.add(neighbor)
                    forward_queue.append((neighbor, path + [neighbor]))
            
            # Backward BFS
            current, path = backward_queue.popleft()
            for neighbor in self.graph.neighbors(current):
                if neighbor in forward_visited:
                    # Found intersection point
                    forward_path = self._find_forward_path(start, neighbor, forward_visited)
                    return forward_path + path[1:]
                
                if neighbor not in backward_visited:
                    backward_visited.add(neighbor)
                    backward_queue.append((neighbor, [neighbor] + path[1:]))
        
        return []  # No path found
    
    def _find_backward_path(self, intersection: str, end: str, visited: Set[str]) -> List[str]:
        """Helper function to reconstruct backward path."""
        path = [intersection]
        current = intersection
        while current != end:
            for neighbor in self.graph.neighbors(current):
                if neighbor in visited:
                    current = neighbor
                    path.append(current)
                    break
        return path
    
    def _find_forward_path(self, start: str, intersection: str, visited: Set[str]) -> List[str]:
        """Helper function to reconstruct forward path."""
        path = [intersection]
        current = intersection
        while current != start:
            for neighbor in self.graph.neighbors(current):
                if neighbor in visited:
                    current = neighbor
                    path.insert(0, current)
                    break
        return path
    
    def standard_bfs(self, start: str, end: str) -> List[str]:
        """Implements standard BFS for comparison."""
        queue = deque([(start, [start])])
        visited = {start}
        
        while queue:
            current, path = queue.popleft()
            if current == end:
                return path
                
            for neighbor in self.graph.neighbors(current):
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append((neighbor, path + [neighbor]))
        return []
    
    def visualize_search(self, path: List[str] = None):
        """Visualize the graph and highlight the found path."""
        pos = nx.spring_layout(self.graph)
        
        # Draw the base graph
        nx.draw_networkx_edges(self.graph, pos, edge_color='gray')
        nx.draw_networkx_nodes(self.graph, pos, node_color='lightblue')
        nx.draw_networkx_labels(self.graph, pos)
        
        # Highlight the path if provided
        if path:
            path_edges = list(zip(path[:-1], path[1:]))
            nx.draw_networkx_edges(self.graph, pos, edgelist=path_edges, 
                                 edge_color='r', width=2)
            nx.draw_networkx_nodes(self.graph, pos, nodelist=path,
                                 node_color='lightgreen')
        
        plt.title("City Map with Shortest Path")
        plt.axis('off')
        plt.show()

# Example usage and comparison
def run_comparison():
    # Create a sample city map
    route_finder = RouteFinder()
    
    # Add some sample roads
    roads = [
        ('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'),
        ('A', 'F'), ('F', 'G'), ('G', 'H'), ('H', 'E'),
        ('B', 'G'), ('C', 'H')
    ]
    
    for road in roads:
        route_finder.add_road(*road)
    
    # Find path using bi-directional BFS
    start, end = 'A', 'E'
    bi_bfs_path = route_finder.bidirectional_bfs(start, end)
    
    # Find path using standard BFS
    bfs_path = route_finder.standard_bfs(start, end)
    
    # Compare results
    print(f"Bi-directional BFS path: {' -> '.join(bi_bfs_path)}")
    print(f"Standard BFS path: {' -> '.join(bfs_path)}")
    
    # Visualize the result
    route_finder.visualize_search(bi_bfs_path)

if __name__ == "__main__":
    run_comparison()
